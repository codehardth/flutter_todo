import 'package:flutter/material.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import 'package:intl/intl.dart';
import 'package:provider/provider.dart';

import '../../../../models/todo_model.dart';
import '../../../../providers/todo_provider.dart';
import 'dialogs/todo_form_dialog_widget.dart';

// StatefulWidget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ To-Do List ‡πÇ‡∏î‡∏¢‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å TodoProvider
// ‡πÉ‡∏ä‡πâ‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô
//    - provider ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ state,
//    - flutter_slidable ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£,
//    - ‡πÅ‡∏•‡∏∞ intl ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
class TodoListPage extends StatefulWidget {
  const TodoListPage({super.key});

  @override
  State<TodoListPage> createState() => _TodoListPageState();
}

class _TodoListPageState extends State<TodoListPage> {
  // _showEditTodoDialog ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á Dialog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á To-Do
  Future<void> _showEditTodoDialog(
    BuildContext context,
    String todoId,
  ) async {
    // ‡πÉ‡∏ä‡πâ todoProvider.getByIdAsync ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• To-Do ‡∏ï‡∏≤‡∏° todoId
    final todoProvider = context.read<TodoProvider>();

    final todo = await todoProvider.getByIdAsync(todoId: todoId);

    if (todo == null) {
      return;
    }

    // mounted == true: ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤ Widget ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô tree (‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
    // if (mounted): ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Widget ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô tree ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á state (setState)
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Widget ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å widget tree (‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô) ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á mounted ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô false
    // ‡∏´‡∏≤‡∏Å‡πÄ‡∏£‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setState ‡πÉ‡∏ô Widget ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å tree ‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î error "setState() called after dispose()"
    if (context.mounted) {
      //üöÄüöÄüöÄ***Exercise 1.edit todo with showDialog (isEdit:true)
      showDialog(
        context: context,
        builder: (context) => TodoFormDialogWidget(
          initialTitle: todo.title,
          initialPriority: todo.priority,
          initialStatus: todo.status,
          initialDueDate: todo.dueDate,
          onSave: (
            title,
            priority,
            status,
            dueDate,
          ) async {
            await todoProvider.updateTodoAsync(
              id: todoId,
              title: title,
              priority: priority,
              status: status,
              dueDate: dueDate,
            );

            todoProvider.getListAsync();
          },
          isEdit: true,
        ),
      );
    }
  }

  Future<void> getListAsync() async {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å TodoProvider ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï state
    final todoProvider = context.read<TodoProvider>();

    await todoProvider.getListAsync();

    if (mounted) {
      // ‡πÉ‡∏ä‡πâ setState ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï UI ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• todo ‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
      setState(() {});
    }
  }

  Future<void> deleteTodoByIdAsync({
    required String todoId,
  }) async {
    final todoProvider = context.read<TodoProvider>();

    await todoProvider.deleteTodoByIdAsync(todoId: todoId);

    getListAsync();
  }

  @override
  void initState() {
    super.initState();

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• todo list ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
    getListAsync();
  }

  @override
  Widget build(BuildContext context) {
    final todos = Provider.of<TodoProvider>(context).todos;

    const priorityOrder = ToDoPriority.allStatuses;

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö todo ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (priority) ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠ (title) ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡∏°‡∏≤
    todos.sort((a, b) {
      final priorityComparison = priorityOrder.indexOf(a.priority).compareTo(
            priorityOrder.indexOf(b.priority),
          );

      if (priorityComparison == 0) {
        return a.title.compareTo(b.title);
      }

      return priorityComparison;
    });

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á todo
    Color getPriorityColor(String priority) {
      switch (priority) {
        case ToDoPriority.high:
          return Colors.red[300]!;
        case ToDoPriority.medium:
          return Colors.orange[300]!;
        case ToDoPriority.low:
          return Colors.green[300]!;
      }

      return Colors.grey;
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á todo
    Color getStatusColor(String status) {
      switch (status) {
        case ToDoStatus.pending:
          return Colors.grey[300]!;
        case ToDoStatus.inprogress:
          return Colors.blue[300]!;
        case ToDoStatus.completed:
          return Colors.green[300]!;
      }

      return Colors.grey;
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á badge color
    Row buildBadgeColor({
      required String title,
      required String label,
      required Color color,
      required double width,
    }) {
      return Row(
        children: [
          Text(
            '$title: ',
          ),
          SizedBox(
            width: width,
            child: DecoratedBox(
              decoration: BoxDecoration(
                color: color,
                borderRadius: const BorderRadius.all(
                  Radius.circular(15),
                ),
              ),
              child: Align(
                alignment: Alignment.center,
                child: Text(label),
              ),
            ),
          ),
        ],
      );
    }

    // RefreshIndiactor Widget: ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏•‡∏á‡∏°‡∏≤ (onRefresh)
    return RefreshIndicator(
      onRefresh: () => getListAsync(),
      child: ListView.builder(
        itemCount: todos.length,
        itemBuilder: (context, index) {
          final todo = todos[index];

          // Card widget: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏¢‡∏°
          return Card(
            // Slidable: ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô Card ‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
            child: Slidable(
              // ActionPane: ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á UI ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô Card ‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
              endActionPane: ActionPane(
                extentRatio: 0.25,
                motion: const DrawerMotion(),
                children: [
                  // SlidableAction: ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Sliable
                  SlidableAction(
                    borderRadius: const BorderRadius.only(
                      topRight: Radius.circular(10),
                      bottomRight: Radius.circular(10),
                    ),
                    autoClose: true,
                    onPressed: (context) {
                      //üöÄüöÄüöÄ***Exercise 2.Remove todo by todoId
                      deleteTodoByIdAsync(todoId: todo.id);
                    },
                    backgroundColor: Colors.red[300]!,
                    icon: Icons.delete,
                  ),
                ],
              ),
              // GestureDetector: ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö detect ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ interact ‡∏Å‡∏±‡∏ö ListTile Widget
              // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏î, ‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á, ‡∏Å‡∏î 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏¥‡∏î, ‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å, ‡∏Å‡∏≤‡∏£‡∏ã‡∏π‡∏° ‡∏Ø‡∏•‡∏Ø
              child: GestureDetector(
                onLongPress: () {
                  _showEditTodoDialog(
                    context,
                    todo.id,
                  );
                },
                // ListTile: ‡∏Ñ‡∏∑‡∏≠ widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß ‡∏™‡πà‡∏ß‡∏ô title, subTitle, ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢ ‡∏Ø‡∏•‡∏Ø
                child: ListTile(
                  leading: const Icon(
                    Icons.task,
                    color: Colors.grey,
                  ),
                  title: Text(
                    todo.title,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  subtitle: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å buildBadgeColor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πâ‡∏≤‡∏á status widget
                      buildBadgeColor(
                        title: 'status',
                        label: todo.status,
                        color: getStatusColor(todo.status),
                        width: 100,
                      ),
                      const SizedBox(height: 5),
                      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å buildBadgeColor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πâ‡∏≤‡∏á priority widget
                      buildBadgeColor(
                          title: 'prioriry',
                          label: todo.priority,
                          color: getPriorityColor(todo.priority),
                          width: 70),
                      const SizedBox(height: 5),
                      // ‡πÉ‡∏ä‡πâ package intl ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô dd-MMM-yyyy
                      Text(
                          'due date: ${DateFormat('dd-MMM-yyyy').format(todo.dueDate.toLocal())}'),
                    ],
                  ),
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}
